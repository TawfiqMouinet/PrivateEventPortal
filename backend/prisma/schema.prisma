// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Role {
  ATTENDEE
  ORGANIZER
  ADMIN
  SUPPORT
  SUPERADMIN
}

model User{
  id       String  @id @default(cuid())
  email     String  @unique
  name      String
  hashedPassword  String
  verified Boolean @default(false)
  role      Role @default(ATTENDEE)
  dob       DateTime
  organizer Organizer?
  sessions Session[]
  registration Registration[]
  document Document[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Session {
  id        String   @id @unique @default(uuid())
  jwt       String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Organizer{
user User @relation(fields: [id], references: [id], onDelete: Cascade)
id String @id
events Event[]
}

model Event{
  id       String  @id @default(cuid())
  organizer Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  organizerId String
  title     String
  description String
  location String
  date DateTime
  registrations Registration[]
  minAge Int @default(0)
  numOfAttendees Int @default(0)
  maxAttendees Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RegStatus {
  PENDING
  ATTENDED
  CANCELLED
}

model Registration{
  id      String  @id @default(cuid())
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  status String
  date DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document{
  id      String  @id @default(cuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId String @unique
  url String @unique
  uploadedAt DateTime @default(now())
}